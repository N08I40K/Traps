plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
}

group = 'ru.n08i40k'
version = '1.1.1'

repositories {
    mavenCentral()

    maven {
        name = "papermc-repo-local"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "CodeMC"
        url = "https://repo.codemc.org/repository/maven-public/"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io/"
    }
    maven { // orbit
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
    maven {
        name = "local"
        url = "file://\\C:\\Users\\n08i40k\\.m2\\repository"
    }
    maven {
        name = "enginehub-maven"
        url = "https://maven.enginehub.org/repo/"
    }
}

dependencies {
    // Core
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"

    // Plugins
    compileOnly 'com.github.decentsoftware-eu:decentholograms:2.8.4'
    compileOnly 'de.tr7zw:item-nbt-api-plugin:2.12.0'

    // My libs
    compileOnly 'ru.n08i40k:npluginapi:1.5'
    implementation 'ru.n08i40k:npluginlocale:1.3'
    implementation 'ru.n08i40k:npluginconfig:1.2'

    // Libs
    implementation "meteordevelopment:orbit:0.2.3"
    implementation 'org.yaml:snakeyaml:2.2'

    // LomBok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.9'
    compileOnly 'com.sk89q.worldedit:worldedit-core:7.2.0-SNAPSHOT'
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.5'
}

shadowJar {
    ext.myRelocate = { String libPackage ->
        String toLib = libPackage

        if (libPackage.contains('.'))
            toLib = libPackage.split("\\.").last()

        print("relocating ${libPackage} to ${project.group}.${project.name.toLowerCase()}.deps.${toLib}\n")
        relocate(libPackage, "${project.group}.${project.name}.deps.${toLib}")
    }

    myRelocate("org.yaml")
    myRelocate("meteordevelopment")
    myRelocate("ru.n08i40k.npluginlocale")
    myRelocate("ru.n08i40k.npluginconfig")
}

jar {
    actions = []
    dependsOn('shadowJar')
}

def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}